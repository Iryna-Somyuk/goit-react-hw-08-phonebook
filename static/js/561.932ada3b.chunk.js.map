{"version":3,"file":"static/js/561.932ada3b.chunk.js","mappings":"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","sources":["redux/selector.jsx","components/PhonebookForm/PhonebookForm.jsx","components/Modal/Modal.jsx","components/EditingContacts/EditingContacts.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/SectionTitle/SectionTitle.jsx","components/App.styled.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilterValue = filter.toLowerCase().trim();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilterValue)\n    );\n  }\n);\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/selector';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { addContact } from 'redux/operations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const PhonebookForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n\n    console.log(values);\n    if (contacts.find(contact => contact.name === values.name)) {\n      toast.error('Attention, this contact is already in the phonebook!', {\n        duration: 4000,\n      });\n      return;\n    }\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form className='flex flex-col'>\n          <label className='flex flex-col gap-1 mb-3 font-normal text-lg'>\n            Name\n            <Field className='p-1 text-lg border-2 rounded w-72'\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ErrorMessage className='text-rose-700 text-xs font-normal' name=\"name\" component=\"span\" />\n          </label>\n          <label className='flex flex-col gap-1 mb-3 font-normal text-lg'>\n            Number{' '}\n            <Field className='p-1 text-lg border-2 rounded w-72'\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMessage className='text-rose-700 text-xs font-normal' name=\"number\" component=\"span\" />\n          </label>\n          <button className='p-1 justify-center items-center w-28 h-8 border-none rounded text-black text-sm bg-fuchsia-500 hover:bg-fuchsia-400' type=\"submit\">Add contact</button>\n        </Form>\n      </Formik>\n      <Toaster position=\"top-center\" reverseOrder={true} />\n    </>\n  );\n};\n\n// Ванільна форма\n// export const PhonebookForm = ({ onSubmit }) => {\n//   const handleSubmit = event => {\n//     event.preventDefault();\n\n//     const { name, number } = event.target.elements;\n//     onSubmit(name.value, number.value);\n//     name.value = '';\n//     number.value = '';\n//   };\n\n//   return (\n//     <FormContainer onSubmit={handleSubmit}>\n//       <Label>\n//         Name\n//         <Input\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n//       </Label>\n//       <Label>\n//         Number{' '}\n//         <Input\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//       </Label>\n//       <Btn type=\"submit\">Add contact</Btn>\n//     </FormContainer>\n//   );\n// };\n\n// PhonebookForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// }\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    const handleEscape = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  }, [onClose]);\n\n  const handleBackdrop = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div\n      className=\"fixed top-0 left-0 w-screen h-screen flex justify-center items-center bg-transparent z-10\"\n      onClick={handleBackdrop}\n    >\n      <div className=\"bg-white m-auto p-10 rounded z-0\">{children}</div>\n    </div>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { editingContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selector';\n\nexport const EditForm = ({ id, onClose }) => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const { name, number } = contacts.find(el => el.id === id);\n\n    const [editName, setEditName] = useState(name);\n    const [editNumber, setEditNumber] = useState(number);\n\n    const handleChange = ({ target: { name, value } }) => {\n        switch (name) {\n            case 'name':\n                setEditName(value);\n                break;\n\n            case 'number':\n                setEditNumber(value);\n                break;\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n\n        dispatch(\n            editingContact({ id, name: editName, number: editNumber })\n        );\n\n        onClose();\n    };\n\n    return (\n        <>\n            {' '}\n            <form className=' w-72 flex flex-col items-center border-2 p-5 rounded my-0 mx-auto ' onSubmit={handleSubmit} autoComplete=\"off\">\n                <label className='w-52  flex flex-col gap-1 mb-4 text-xs font-normal capitalize text-black'>\n                    Name\n                    <input className=' w-full p-1 text-xs font-normal border-2 border-solid  rounded'\n                        name=\"name\"\n                        value={editName}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        onChange={handleChange}\n                        placeholder=\"Enter name\"\n                    />\n                </label>\n                <label className='w-52 flex flex-col gap-1 mb-4 text-xs font-normal capitalize text-black'>\n                    Number\n                    <input className=' w-full p-1 text-xs font-normal border-2 border-solid  rounded'\n                        type=\"tel\"\n                        name=\"number\"\n                        value={editNumber}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        onChange={handleChange}\n                        placeholder=\"000-00-00\"\n                    />\n                </label>\n                <ul className='flex justify-around w-full mt-5'>\n                    <li>\n                        <button className='text-gray-dark w-20 h-8 px-2 py-1 text-sm border-2 border-gray-dark rounded-lg hover:text-orange hover:border-orange curcor-pointer' type=\"submit\" text=\"Edit\">\n                            Edit\n                        </button>\n                    </li>\n                    <li>\n                        <button className='text-gray-dark w-20 h-8 px-2 py-1 text-sm border-2 border-gray-dark rounded-lg hover:text-orange hover:border-orange curcor-pointer'\n                            type=\"button\"\n                            text=\"Cancel\"\n                            onClick={onClose}\n                        >\n                            Cancel\n                        </button>\n                    </li>\n                </ul>\n            </form>\n        </>\n    );\n};\n\nEditForm.propTypes = {\n    id: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n};","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { Modal } from 'components/Modal/Modal';\nimport { EditForm } from 'components/EditingContacts/EditingContacts';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const [contactId, setContactId] = useState('');\n  const [btnName, setBtnName] = useState('');\n\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  useEffect(() => {\n    if (contactId) {\n        document.body.style.overflow = 'hidden';\n    }\n}, [contactId]);\n\nconst closeModal = () => {\n    setContactId('');\n    setBtnName('');\n    document.body.style.overflow = 'unset';\n};\nconst clickBtnHandler = ({ currentTarget: { name } }) => {\n  setBtnName(name);\n  setContactId(id);\n};\n\n  return (\n    <>\n    <li className=' inline-flex flex-row gap-5 items-center justify-between'>\n      <span className='text-sm font-medium text-black'>\n        {name}: {number}\n      </span>\n      <div>\n      <button className='p-1 justify-center items-center w-16 h-7 border-none rounded text-black text-sm bg-fuchsia-500 hover:bg-fuchsia-400' type=\"button\" name=\"edit\" onClick={clickBtnHandler}>Edit</button>\n      <button className='p-1 ml-2 justify-center items-center w-16 h-7 border-none rounded text-black text-sm bg-fuchsia-500 hover:bg-fuchsia-400' onClick={handleDeleteContact}>Delete</button>\n      </div>\n    </li>\n    {contactId && btnName === 'edit' && (\n      <Modal onClose={closeModal}>\n          <EditForm id={contactId} onClose={closeModal} />\n      </Modal>\n  )}\n </> );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { Contact } from '../Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selector';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  return (\n    <ul className=\"flex flex-col gap-2\">\n      {contacts.map(contact => (\n        <Contact key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selector';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleChange = ev => {\n    dispatch(setFilter(ev.target.value));\n  };\n\n  return (\n    <label className=\"flex flex-col gap-1 mb-3 font-medium text-lg\">\n      Find contacts by name\n      <input\n        className=\"p-1 border-2 rounded w-72 text-base\"\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n      />\n    </label>\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <div className=\" flex flex-col items-center px-5 py-4\">\n      <h1 className=\"text-black mb-5 font-bold uppercase text-xl\">{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const Сontainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n\n  width: 500px;\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.2), 0px 2px 2px rgba(0, 0.5, 0, 0.24);\n  background-image: linear-gradient(to bottom, #7bc6cc, #be93c5);\n`;\n","\nimport { PhonebookForm } from '../components/PhonebookForm/PhonebookForm';\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { Filter } from '../components/Filter/Filter';\nimport { Section } from '../components/SectionTitle/SectionTitle';\nimport { Сontainer } from '../components/App.styled';\nimport { fetchContacts } from 'redux/operations';\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectIsLoading, selectError } from 'redux/selector';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (<>\n    <Сontainer>\n      <Section title=\"Phonebook\">\n        <PhonebookForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        {!isLoading && <ContactsList />}\n      </Section>\n    </Сontainer>\n    </>\n  );\n};\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","normalizedFilterValue","toLowerCase","trim","name","includes","schema","yup","shape","required","number","initialValues","PhonebookForm","useSelector","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","console","log","find","contact","toast","duration","addContact","className","type","pattern","title","component","position","reverseOrder","modalRoot","document","querySelector","Modal","onClose","children","useEffect","handleEscape","e","code","window","addEventListener","removeEventListener","createPortal","onClick","target","currentTarget","EditForm","id","el","useState","editName","setEditName","editNumber","setEditNumber","handleChange","value","evt","preventDefault","editingContact","autoComplete","onChange","placeholder","text","Contact","contactId","setContactId","btnName","setBtnName","body","style","overflow","closeModal","deleteContact","ContactsList","map","Filter","ev","setFilter","Section","Сontainer","styled","fetchContacts"],"sourceRoot":""}